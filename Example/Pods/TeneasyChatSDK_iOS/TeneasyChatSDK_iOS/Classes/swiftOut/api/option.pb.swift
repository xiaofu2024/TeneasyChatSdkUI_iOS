// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: api/option.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Api_AuthenticationRole: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case authRoleNone // = 0

  /// require account id
  case authRoleAccount // = 1

  /// anonymous device
  case authRoleDevice // = 2

  /// microservices
  case authRoleService // = 4

  /// third party partners
  case authRoleExternal // = 8

  /// call from tenant role
  case authRoleTenant // = 16

  /// call from app admin role
  case authRoleAdmin // = 32

  /// call from not trusted public source
  case authRolePublic // = 64
  case UNRECOGNIZED(Int)

  public init() {
    self = .authRoleNone
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .authRoleNone
    case 1: self = .authRoleAccount
    case 2: self = .authRoleDevice
    case 4: self = .authRoleService
    case 8: self = .authRoleExternal
    case 16: self = .authRoleTenant
    case 32: self = .authRoleAdmin
    case 64: self = .authRolePublic
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .authRoleNone: return 0
    case .authRoleAccount: return 1
    case .authRoleDevice: return 2
    case .authRoleService: return 4
    case .authRoleExternal: return 8
    case .authRoleTenant: return 16
    case .authRoleAdmin: return 32
    case .authRolePublic: return 64
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Api_AuthenticationRole: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Api_AuthenticationRole] = [
    .authRoleNone,
    .authRoleAccount,
    .authRoleDevice,
    .authRoleService,
    .authRoleExternal,
    .authRoleTenant,
    .authRoleAdmin,
    .authRolePublic,
  ]
}

#endif  // swift(>=4.2)

public enum Api_PayloadType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case jsonPayload // = 0
  case binaryPayload // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .jsonPayload
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .jsonPayload
    case 1: self = .binaryPayload
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .jsonPayload: return 0
    case .binaryPayload: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Api_PayloadType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Api_PayloadType] = [
    .jsonPayload,
    .binaryPayload,
  ]
}

#endif  // swift(>=4.2)

public struct Api_Payload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Api_PayloadType = .jsonPayload

  public var examples: [Api_Example] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Api_ExternalDocumentation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var description_p: String {
    get {return _description_p ?? String()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {self._description_p = nil}

  public var url: String {
    get {return _url ?? String()}
    set {_url = newValue}
  }
  /// Returns true if `url` has been explicitly set.
  public var hasURL: Bool {return self._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
  public mutating func clearURL() {self._url = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _description_p: String? = nil
  fileprivate var _url: String? = nil
}

public struct Api_Example {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var summary: String {
    get {return _summary ?? String()}
    set {_summary = newValue}
  }
  /// Returns true if `summary` has been explicitly set.
  public var hasSummary: Bool {return self._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
  public mutating func clearSummary() {self._summary = nil}

  public var description_p: String {
    get {return _description_p ?? String()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {self._description_p = nil}

  public var value: String {
    get {return _value ?? String()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {self._value = nil}

  public var externalValue: String {
    get {return _externalValue ?? String()}
    set {_externalValue = newValue}
  }
  /// Returns true if `externalValue` has been explicitly set.
  public var hasExternalValue: Bool {return self._externalValue != nil}
  /// Clears the value of `externalValue`. Subsequent reads from it will return its default value.
  public mutating func clearExternalValue() {self._externalValue = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _summary: String? = nil
  fileprivate var _description_p: String? = nil
  fileprivate var _value: String? = nil
  fileprivate var _externalValue: String? = nil
}

/// 表示方法请求以及响应操作的是一个数据集合
public struct Api_MessageCache {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 元素集合名称， 例如: group_members。 如果api需要写入数据库，可以省略name属性
  public var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {self._name = nil}

  /// 请求以及响应中的元素集合id field, 与name组合后可以作为缓存key，分布式事务锁。 如果不设置则使用当前登陆用户id
  public var id: String {
    get {return _id ?? String()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  /// 请求及响应的的元素集合tag field, 用来作为缓存的版本号
  public var tag: String {
    get {return _tag ?? String()}
    set {_tag = newValue}
  }
  /// Returns true if `tag` has been explicitly set.
  public var hasTag: Bool {return self._tag != nil}
  /// Clears the value of `tag`. Subsequent reads from it will return its default value.
  public mutating func clearTag() {self._tag = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _name: String? = nil
  fileprivate var _id: String? = nil
  fileprivate var _tag: String? = nil
}

public struct Api_InfoOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var appID: String {
    get {return _appID ?? String()}
    set {_appID = newValue}
  }
  /// Returns true if `appID` has been explicitly set.
  public var hasAppID: Bool {return self._appID != nil}
  /// Clears the value of `appID`. Subsequent reads from it will return its default value.
  public mutating func clearAppID() {self._appID = nil}

  public var authors: [String] = []

  public var inheritAuthors: Bool {
    get {return _inheritAuthors ?? false}
    set {_inheritAuthors = newValue}
  }
  /// Returns true if `inheritAuthors` has been explicitly set.
  public var hasInheritAuthors: Bool {return self._inheritAuthors != nil}
  /// Clears the value of `inheritAuthors`. Subsequent reads from it will return its default value.
  public mutating func clearInheritAuthors() {self._inheritAuthors = nil}

  public var date: String {
    get {return _date ?? String()}
    set {_date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  public var hasDate: Bool {return self._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  public mutating func clearDate() {self._date = nil}

  public var tags: [String] = []

  public var auth: [Api_AuthenticationRole] = []

  public var path: String {
    get {return _path ?? String()}
    set {_path = newValue}
  }
  /// Returns true if `path` has been explicitly set.
  public var hasPath: Bool {return self._path != nil}
  /// Clears the value of `path`. Subsequent reads from it will return its default value.
  public mutating func clearPath() {self._path = nil}

  public var qos: Int32 {
    get {return _qos ?? 0}
    set {_qos = newValue}
  }
  /// Returns true if `qos` has been explicitly set.
  public var hasQos: Bool {return self._qos != nil}
  /// Clears the value of `qos`. Subsequent reads from it will return its default value.
  public mutating func clearQos() {self._qos = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _appID: String? = nil
  fileprivate var _inheritAuthors: Bool? = nil
  fileprivate var _date: String? = nil
  fileprivate var _path: String? = nil
  fileprivate var _qos: Int32? = nil
}

public struct Api_ServiceOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var summary: String {
    get {return _summary ?? String()}
    set {_summary = newValue}
  }
  /// Returns true if `summary` has been explicitly set.
  public var hasSummary: Bool {return self._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
  public mutating func clearSummary() {self._summary = nil}

  public var authors: [String] = []

  public var inheritAuthors: Bool {
    get {return _inheritAuthors ?? false}
    set {_inheritAuthors = newValue}
  }
  /// Returns true if `inheritAuthors` has been explicitly set.
  public var hasInheritAuthors: Bool {return self._inheritAuthors != nil}
  /// Clears the value of `inheritAuthors`. Subsequent reads from it will return its default value.
  public mutating func clearInheritAuthors() {self._inheritAuthors = nil}

  public var date: String {
    get {return _date ?? String()}
    set {_date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  public var hasDate: Bool {return self._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  public mutating func clearDate() {self._date = nil}

  public var tags: [String] = []

  public var auth: [Api_AuthenticationRole] = []

  public var path: String {
    get {return _path ?? String()}
    set {_path = newValue}
  }
  /// Returns true if `path` has been explicitly set.
  public var hasPath: Bool {return self._path != nil}
  /// Clears the value of `path`. Subsequent reads from it will return its default value.
  public mutating func clearPath() {self._path = nil}

  public var qos: Int32 {
    get {return _qos ?? 0}
    set {_qos = newValue}
  }
  /// Returns true if `qos` has been explicitly set.
  public var hasQos: Bool {return self._qos != nil}
  /// Clears the value of `qos`. Subsequent reads from it will return its default value.
  public mutating func clearQos() {self._qos = nil}

  public var cache: Api_MessageCache {
    get {return _cache ?? Api_MessageCache()}
    set {_cache = newValue}
  }
  /// Returns true if `cache` has been explicitly set.
  public var hasCache: Bool {return self._cache != nil}
  /// Clears the value of `cache`. Subsequent reads from it will return its default value.
  public mutating func clearCache() {self._cache = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _summary: String? = nil
  fileprivate var _inheritAuthors: Bool? = nil
  fileprivate var _date: String? = nil
  fileprivate var _path: String? = nil
  fileprivate var _qos: Int32? = nil
  fileprivate var _cache: Api_MessageCache? = nil
}

public struct Api_MethodOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 每服务唯一的方法ID， 最大值 8191
  public var id: UInt32 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var summary: String {
    get {return _storage._summary ?? String()}
    set {_uniqueStorage()._summary = newValue}
  }
  /// Returns true if `summary` has been explicitly set.
  public var hasSummary: Bool {return _storage._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
  public mutating func clearSummary() {_uniqueStorage()._summary = nil}

  /// api开发完成可测试后设置为true
  public var ready: Bool {
    get {return _storage._ready ?? false}
    set {_uniqueStorage()._ready = newValue}
  }
  /// Returns true if `ready` has been explicitly set.
  public var hasReady: Bool {return _storage._ready != nil}
  /// Clears the value of `ready`. Subsequent reads from it will return its default value.
  public mutating func clearReady() {_uniqueStorage()._ready = nil}

  public var authors: [String] {
    get {return _storage._authors}
    set {_uniqueStorage()._authors = newValue}
  }

  public var inheritAuthors: Bool {
    get {return _storage._inheritAuthors ?? false}
    set {_uniqueStorage()._inheritAuthors = newValue}
  }
  /// Returns true if `inheritAuthors` has been explicitly set.
  public var hasInheritAuthors: Bool {return _storage._inheritAuthors != nil}
  /// Clears the value of `inheritAuthors`. Subsequent reads from it will return its default value.
  public mutating func clearInheritAuthors() {_uniqueStorage()._inheritAuthors = nil}

  public var date: String {
    get {return _storage._date ?? String()}
    set {_uniqueStorage()._date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  public var hasDate: Bool {return _storage._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  public mutating func clearDate() {_uniqueStorage()._date = nil}

  public var tags: [String] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  public var auth: [Api_AuthenticationRole] {
    get {return _storage._auth}
    set {_uniqueStorage()._auth = newValue}
  }

  public var path: String {
    get {return _storage._path ?? String()}
    set {_uniqueStorage()._path = newValue}
  }
  /// Returns true if `path` has been explicitly set.
  public var hasPath: Bool {return _storage._path != nil}
  /// Clears the value of `path`. Subsequent reads from it will return its default value.
  public mutating func clearPath() {_uniqueStorage()._path = nil}

  public var qos: Int32 {
    get {return _storage._qos ?? 0}
    set {_uniqueStorage()._qos = newValue}
  }
  /// Returns true if `qos` has been explicitly set.
  public var hasQos: Bool {return _storage._qos != nil}
  /// Clears the value of `qos`. Subsequent reads from it will return its default value.
  public mutating func clearQos() {_uniqueStorage()._qos = nil}

  public var cache: Api_MessageCache {
    get {return _storage._cache ?? Api_MessageCache()}
    set {_uniqueStorage()._cache = newValue}
  }
  /// Returns true if `cache` has been explicitly set.
  public var hasCache: Bool {return _storage._cache != nil}
  /// Clears the value of `cache`. Subsequent reads from it will return its default value.
  public mutating func clearCache() {_uniqueStorage()._cache = nil}

  public var readonly: Bool {
    get {return _storage._readonly ?? false}
    set {_uniqueStorage()._readonly = newValue}
  }
  /// Returns true if `readonly` has been explicitly set.
  public var hasReadonly: Bool {return _storage._readonly != nil}
  /// Clears the value of `readonly`. Subsequent reads from it will return its default value.
  public mutating func clearReadonly() {_uniqueStorage()._readonly = nil}

  public var `in`: Api_Payload {
    get {return _storage._in ?? Api_Payload()}
    set {_uniqueStorage()._in = newValue}
  }
  /// Returns true if ``in`` has been explicitly set.
  public var hasIn: Bool {return _storage._in != nil}
  /// Clears the value of ``in``. Subsequent reads from it will return its default value.
  public mutating func clearIn() {_uniqueStorage()._in = nil}

  public var out: Api_Payload {
    get {return _storage._out ?? Api_Payload()}
    set {_uniqueStorage()._out = newValue}
  }
  /// Returns true if `out` has been explicitly set.
  public var hasOut: Bool {return _storage._out != nil}
  /// Clears the value of `out`. Subsequent reads from it will return its default value.
  public mutating func clearOut() {_uniqueStorage()._out = nil}

  public var docs: [Api_ExternalDocumentation] {
    get {return _storage._docs}
    set {_uniqueStorage()._docs = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Api_PubSubOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 业务中不指定pubsubName时使用的默认值
  /// 如果为空则使用service name
  public var name: String = String()

  /// 指定topic, 默认使用name.{method name}
  public var topic: String = String()

  /// 指定route path, 默认使用"/${service name}/${method name}"
  public var route: String = String()

  /// 当执行失败时是否重试
  public var retry: Bool = false

  /// 指定content_type, 默认"application/json"
  public var contentType: String = String()

  /// CEL格式的表达式, 用来筛选订阅
  public var match: String = String()

  /// 优先级, 尚未实现
  public var priority: Int32 = 0

  /// DisableTopicValidation allows to receive events from publisher topics that differ from the subscribed topic.
  public var disableTopicValidation: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Api_MessageOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var summary: String {
    get {return _summary ?? String()}
    set {_summary = newValue}
  }
  /// Returns true if `summary` has been explicitly set.
  public var hasSummary: Bool {return self._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
  public mutating func clearSummary() {self._summary = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _summary: String? = nil
}

public struct Api_FieldOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var summary: String {
    get {return _summary ?? String()}
    set {_summary = newValue}
  }
  /// Returns true if `summary` has been explicitly set.
  public var hasSummary: Bool {return self._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
  public mutating func clearSummary() {self._summary = nil}

  public var `in`: Bool {
    get {return _in ?? false}
    set {_in = newValue}
  }
  /// Returns true if ``in`` has been explicitly set.
  public var hasIn: Bool {return self._in != nil}
  /// Clears the value of ``in``. Subsequent reads from it will return its default value.
  public mutating func clearIn() {self._in = nil}

  public var out: Bool {
    get {return _out ?? false}
    set {_out = newValue}
  }
  /// Returns true if `out` has been explicitly set.
  public var hasOut: Bool {return self._out != nil}
  /// Clears the value of `out`. Subsequent reads from it will return its default value.
  public mutating func clearOut() {self._out = nil}

  public var required: Bool {
    get {return _required ?? false}
    set {_required = newValue}
  }
  /// Returns true if `required` has been explicitly set.
  public var hasRequired: Bool {return self._required != nil}
  /// Clears the value of `required`. Subsequent reads from it will return its default value.
  public mutating func clearRequired() {self._required = nil}

  public var example: String {
    get {return _example ?? String()}
    set {_example = newValue}
  }
  /// Returns true if `example` has been explicitly set.
  public var hasExample: Bool {return self._example != nil}
  /// Clears the value of `example`. Subsequent reads from it will return its default value.
  public mutating func clearExample() {self._example = nil}

  /// JSON Schema definition
  public var minimum: Int64 {
    get {return _minimum ?? 0}
    set {_minimum = newValue}
  }
  /// Returns true if `minimum` has been explicitly set.
  public var hasMinimum: Bool {return self._minimum != nil}
  /// Clears the value of `minimum`. Subsequent reads from it will return its default value.
  public mutating func clearMinimum() {self._minimum = nil}

  public var exclusiveMinimum: Bool {
    get {return _exclusiveMinimum ?? false}
    set {_exclusiveMinimum = newValue}
  }
  /// Returns true if `exclusiveMinimum` has been explicitly set.
  public var hasExclusiveMinimum: Bool {return self._exclusiveMinimum != nil}
  /// Clears the value of `exclusiveMinimum`. Subsequent reads from it will return its default value.
  public mutating func clearExclusiveMinimum() {self._exclusiveMinimum = nil}

  public var maximum: UInt64 {
    get {return _maximum ?? 0}
    set {_maximum = newValue}
  }
  /// Returns true if `maximum` has been explicitly set.
  public var hasMaximum: Bool {return self._maximum != nil}
  /// Clears the value of `maximum`. Subsequent reads from it will return its default value.
  public mutating func clearMaximum() {self._maximum = nil}

  public var exclusiveMaximum: Bool {
    get {return _exclusiveMaximum ?? false}
    set {_exclusiveMaximum = newValue}
  }
  /// Returns true if `exclusiveMaximum` has been explicitly set.
  public var hasExclusiveMaximum: Bool {return self._exclusiveMaximum != nil}
  /// Clears the value of `exclusiveMaximum`. Subsequent reads from it will return its default value.
  public mutating func clearExclusiveMaximum() {self._exclusiveMaximum = nil}

  public var multipleOf: Int64 {
    get {return _multipleOf ?? 0}
    set {_multipleOf = newValue}
  }
  /// Returns true if `multipleOf` has been explicitly set.
  public var hasMultipleOf: Bool {return self._multipleOf != nil}
  /// Clears the value of `multipleOf`. Subsequent reads from it will return its default value.
  public mutating func clearMultipleOf() {self._multipleOf = nil}

  public var maxLength: UInt32 {
    get {return _maxLength ?? 0}
    set {_maxLength = newValue}
  }
  /// Returns true if `maxLength` has been explicitly set.
  public var hasMaxLength: Bool {return self._maxLength != nil}
  /// Clears the value of `maxLength`. Subsequent reads from it will return its default value.
  public mutating func clearMaxLength() {self._maxLength = nil}

  public var minLength: UInt32 {
    get {return _minLength ?? 0}
    set {_minLength = newValue}
  }
  /// Returns true if `minLength` has been explicitly set.
  public var hasMinLength: Bool {return self._minLength != nil}
  /// Clears the value of `minLength`. Subsequent reads from it will return its default value.
  public mutating func clearMinLength() {self._minLength = nil}

  /// This string SHOULD be a valid regular expression
  public var pattern: String {
    get {return _pattern ?? String()}
    set {_pattern = newValue}
  }
  /// Returns true if `pattern` has been explicitly set.
  public var hasPattern: Bool {return self._pattern != nil}
  /// Clears the value of `pattern`. Subsequent reads from it will return its default value.
  public mutating func clearPattern() {self._pattern = nil}

  public var maxItems: UInt32 {
    get {return _maxItems ?? 0}
    set {_maxItems = newValue}
  }
  /// Returns true if `maxItems` has been explicitly set.
  public var hasMaxItems: Bool {return self._maxItems != nil}
  /// Clears the value of `maxItems`. Subsequent reads from it will return its default value.
  public mutating func clearMaxItems() {self._maxItems = nil}

  public var minItems: UInt32 {
    get {return _minItems ?? 0}
    set {_minItems = newValue}
  }
  /// Returns true if `minItems` has been explicitly set.
  public var hasMinItems: Bool {return self._minItems != nil}
  /// Clears the value of `minItems`. Subsequent reads from it will return its default value.
  public mutating func clearMinItems() {self._minItems = nil}

  public var uniqueItems: Bool {
    get {return _uniqueItems ?? false}
    set {_uniqueItems = newValue}
  }
  /// Returns true if `uniqueItems` has been explicitly set.
  public var hasUniqueItems: Bool {return self._uniqueItems != nil}
  /// Clears the value of `uniqueItems`. Subsequent reads from it will return its default value.
  public mutating func clearUniqueItems() {self._uniqueItems = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _summary: String? = nil
  fileprivate var _in: Bool? = nil
  fileprivate var _out: Bool? = nil
  fileprivate var _required: Bool? = nil
  fileprivate var _example: String? = nil
  fileprivate var _minimum: Int64? = nil
  fileprivate var _exclusiveMinimum: Bool? = nil
  fileprivate var _maximum: UInt64? = nil
  fileprivate var _exclusiveMaximum: Bool? = nil
  fileprivate var _multipleOf: Int64? = nil
  fileprivate var _maxLength: UInt32? = nil
  fileprivate var _minLength: UInt32? = nil
  fileprivate var _pattern: String? = nil
  fileprivate var _maxItems: UInt32? = nil
  fileprivate var _minItems: UInt32? = nil
  fileprivate var _uniqueItems: Bool? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Api_AuthenticationRole: @unchecked Sendable {}
extension Api_PayloadType: @unchecked Sendable {}
extension Api_Payload: @unchecked Sendable {}
extension Api_ExternalDocumentation: @unchecked Sendable {}
extension Api_Example: @unchecked Sendable {}
extension Api_MessageCache: @unchecked Sendable {}
extension Api_InfoOptions: @unchecked Sendable {}
extension Api_ServiceOptions: @unchecked Sendable {}
extension Api_MethodOptions: @unchecked Sendable {}
extension Api_PubSubOptions: @unchecked Sendable {}
extension Api_MessageOptions: @unchecked Sendable {}
extension Api_FieldOptions: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Extension support defined in option.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension SwiftProtobuf.Google_Protobuf_FieldOptions {

  public var Api_schema: Api_FieldOptions {
    get {return getExtensionValue(ext: Api_Extensions_schema) ?? Api_FieldOptions()}
    set {setExtensionValue(ext: Api_Extensions_schema, value: newValue)}
  }
  /// Returns true if extension `Api_Extensions_schema`
  /// has been explicitly set.
  public var hasApi_schema: Bool {
    return hasExtensionValue(ext: Api_Extensions_schema)
  }
  /// Clears the value of extension `Api_Extensions_schema`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearApi_schema() {
    clearExtensionValue(ext: Api_Extensions_schema)
  }
}

extension SwiftProtobuf.Google_Protobuf_FileOptions {

  public var Api_info: Api_InfoOptions {
    get {return getExtensionValue(ext: Api_Extensions_info) ?? Api_InfoOptions()}
    set {setExtensionValue(ext: Api_Extensions_info, value: newValue)}
  }
  /// Returns true if extension `Api_Extensions_info`
  /// has been explicitly set.
  public var hasApi_info: Bool {
    return hasExtensionValue(ext: Api_Extensions_info)
  }
  /// Clears the value of extension `Api_Extensions_info`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearApi_info() {
    clearExtensionValue(ext: Api_Extensions_info)
  }
}

extension SwiftProtobuf.Google_Protobuf_MessageOptions {

  public var Api_component: Api_MessageOptions {
    get {return getExtensionValue(ext: Api_Extensions_component) ?? Api_MessageOptions()}
    set {setExtensionValue(ext: Api_Extensions_component, value: newValue)}
  }
  /// Returns true if extension `Api_Extensions_component`
  /// has been explicitly set.
  public var hasApi_component: Bool {
    return hasExtensionValue(ext: Api_Extensions_component)
  }
  /// Clears the value of extension `Api_Extensions_component`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearApi_component() {
    clearExtensionValue(ext: Api_Extensions_component)
  }
}

extension SwiftProtobuf.Google_Protobuf_MethodOptions {

  public var Api_method: Api_MethodOptions {
    get {return getExtensionValue(ext: Api_Extensions_method) ?? Api_MethodOptions()}
    set {setExtensionValue(ext: Api_Extensions_method, value: newValue)}
  }
  /// Returns true if extension `Api_Extensions_method`
  /// has been explicitly set.
  public var hasApi_method: Bool {
    return hasExtensionValue(ext: Api_Extensions_method)
  }
  /// Clears the value of extension `Api_Extensions_method`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearApi_method() {
    clearExtensionValue(ext: Api_Extensions_method)
  }

  public var Api_pubSub: Api_PubSubOptions {
    get {return getExtensionValue(ext: Api_Extensions_pub_sub) ?? Api_PubSubOptions()}
    set {setExtensionValue(ext: Api_Extensions_pub_sub, value: newValue)}
  }
  /// Returns true if extension `Api_Extensions_pub_sub`
  /// has been explicitly set.
  public var hasApi_pubSub: Bool {
    return hasExtensionValue(ext: Api_Extensions_pub_sub)
  }
  /// Clears the value of extension `Api_Extensions_pub_sub`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearApi_pubSub() {
    clearExtensionValue(ext: Api_Extensions_pub_sub)
  }
}

extension SwiftProtobuf.Google_Protobuf_ServiceOptions {

  public var Api_service: Api_ServiceOptions {
    get {return getExtensionValue(ext: Api_Extensions_service) ?? Api_ServiceOptions()}
    set {setExtensionValue(ext: Api_Extensions_service, value: newValue)}
  }
  /// Returns true if extension `Api_Extensions_service`
  /// has been explicitly set.
  public var hasApi_service: Bool {
    return hasExtensionValue(ext: Api_Extensions_service)
  }
  /// Clears the value of extension `Api_Extensions_service`.
  /// Subsequent reads from it will return its default value.
  public mutating func clearApi_service() {
    clearExtensionValue(ext: Api_Extensions_service)
  }

}

// MARK: - File's ExtensionMap: Api_Option_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
public let Api_Option_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Api_Extensions_info,
  Api_Extensions_service,
  Api_Extensions_method,
  Api_Extensions_pub_sub,
  Api_Extensions_component,
  Api_Extensions_schema
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

public let Api_Extensions_info = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Api_InfoOptions>, SwiftProtobuf.Google_Protobuf_FileOptions>(
  _protobuf_fieldNumber: 52199,
  fieldName: "api.info"
)

public let Api_Extensions_service = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Api_ServiceOptions>, SwiftProtobuf.Google_Protobuf_ServiceOptions>(
  _protobuf_fieldNumber: 52199,
  fieldName: "api.service"
)

public let Api_Extensions_method = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Api_MethodOptions>, SwiftProtobuf.Google_Protobuf_MethodOptions>(
  _protobuf_fieldNumber: 52199,
  fieldName: "api.method"
)

public let Api_Extensions_pub_sub = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Api_PubSubOptions>, SwiftProtobuf.Google_Protobuf_MethodOptions>(
  _protobuf_fieldNumber: 52200,
  fieldName: "api.pub_sub"
)

public let Api_Extensions_component = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Api_MessageOptions>, SwiftProtobuf.Google_Protobuf_MessageOptions>(
  _protobuf_fieldNumber: 52198,
  fieldName: "api.component"
)

public let Api_Extensions_schema = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Api_FieldOptions>, SwiftProtobuf.Google_Protobuf_FieldOptions>(
  _protobuf_fieldNumber: 52199,
  fieldName: "api.schema"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "api"

extension Api_AuthenticationRole: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AUTH_ROLE_NONE"),
    1: .same(proto: "AUTH_ROLE_ACCOUNT"),
    2: .same(proto: "AUTH_ROLE_DEVICE"),
    4: .same(proto: "AUTH_ROLE_SERVICE"),
    8: .same(proto: "AUTH_ROLE_EXTERNAL"),
    16: .same(proto: "AUTH_ROLE_TENANT"),
    32: .same(proto: "AUTH_ROLE_ADMIN"),
    64: .same(proto: "AUTH_ROLE_PUBLIC"),
  ]
}

extension Api_PayloadType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JSON_PAYLOAD"),
    1: .same(proto: "BINARY_PAYLOAD"),
  ]
}

extension Api_Payload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Payload"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "examples"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.examples) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .jsonPayload {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.examples.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.examples, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Payload, rhs: Api_Payload) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.examples != rhs.examples {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_ExternalDocumentation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExternalDocumentation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._description_p) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._url) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._description_p {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._url {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_ExternalDocumentation, rhs: Api_ExternalDocumentation) -> Bool {
    if lhs._description_p != rhs._description_p {return false}
    if lhs._url != rhs._url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Example: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Example"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "summary"),
    2: .same(proto: "description"),
    3: .same(proto: "value"),
    4: .same(proto: "externalValue"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._summary) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._value) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._externalValue) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._summary {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._description_p {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._value {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._externalValue {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Example, rhs: Api_Example) -> Bool {
    if lhs._summary != rhs._summary {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs._value != rhs._value {return false}
    if lhs._externalValue != rhs._externalValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_MessageCache: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MessageCache"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "id"),
    3: .same(proto: "tag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._tag) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._tag {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_MessageCache, rhs: Api_MessageCache) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._id != rhs._id {return false}
    if lhs._tag != rhs._tag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_InfoOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InfoOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    13: .standard(proto: "app_id"),
    100: .same(proto: "authors"),
    101: .standard(proto: "inherit_authors"),
    102: .same(proto: "date"),
    103: .same(proto: "tags"),
    201: .same(proto: "auth"),
    202: .same(proto: "path"),
    203: .same(proto: "qos"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 13: try { try decoder.decodeSingularStringField(value: &self._appID) }()
      case 100: try { try decoder.decodeRepeatedStringField(value: &self.authors) }()
      case 101: try { try decoder.decodeSingularBoolField(value: &self._inheritAuthors) }()
      case 102: try { try decoder.decodeSingularStringField(value: &self._date) }()
      case 103: try { try decoder.decodeRepeatedStringField(value: &self.tags) }()
      case 201: try { try decoder.decodeRepeatedEnumField(value: &self.auth) }()
      case 202: try { try decoder.decodeSingularStringField(value: &self._path) }()
      case 203: try { try decoder.decodeSingularInt32Field(value: &self._qos) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._appID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 13)
    } }()
    if !self.authors.isEmpty {
      try visitor.visitRepeatedStringField(value: self.authors, fieldNumber: 100)
    }
    try { if let v = self._inheritAuthors {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 101)
    } }()
    try { if let v = self._date {
      try visitor.visitSingularStringField(value: v, fieldNumber: 102)
    } }()
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 103)
    }
    if !self.auth.isEmpty {
      try visitor.visitPackedEnumField(value: self.auth, fieldNumber: 201)
    }
    try { if let v = self._path {
      try visitor.visitSingularStringField(value: v, fieldNumber: 202)
    } }()
    try { if let v = self._qos {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 203)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_InfoOptions, rhs: Api_InfoOptions) -> Bool {
    if lhs._appID != rhs._appID {return false}
    if lhs.authors != rhs.authors {return false}
    if lhs._inheritAuthors != rhs._inheritAuthors {return false}
    if lhs._date != rhs._date {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.auth != rhs.auth {return false}
    if lhs._path != rhs._path {return false}
    if lhs._qos != rhs._qos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_ServiceOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ServiceOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "summary"),
    100: .same(proto: "authors"),
    101: .standard(proto: "inherit_authors"),
    102: .same(proto: "date"),
    103: .same(proto: "tags"),
    201: .same(proto: "auth"),
    202: .same(proto: "path"),
    203: .same(proto: "qos"),
    204: .same(proto: "cache"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._summary) }()
      case 100: try { try decoder.decodeRepeatedStringField(value: &self.authors) }()
      case 101: try { try decoder.decodeSingularBoolField(value: &self._inheritAuthors) }()
      case 102: try { try decoder.decodeSingularStringField(value: &self._date) }()
      case 103: try { try decoder.decodeRepeatedStringField(value: &self.tags) }()
      case 201: try { try decoder.decodeRepeatedEnumField(value: &self.auth) }()
      case 202: try { try decoder.decodeSingularStringField(value: &self._path) }()
      case 203: try { try decoder.decodeSingularInt32Field(value: &self._qos) }()
      case 204: try { try decoder.decodeSingularMessageField(value: &self._cache) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._summary {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    if !self.authors.isEmpty {
      try visitor.visitRepeatedStringField(value: self.authors, fieldNumber: 100)
    }
    try { if let v = self._inheritAuthors {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 101)
    } }()
    try { if let v = self._date {
      try visitor.visitSingularStringField(value: v, fieldNumber: 102)
    } }()
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 103)
    }
    if !self.auth.isEmpty {
      try visitor.visitPackedEnumField(value: self.auth, fieldNumber: 201)
    }
    try { if let v = self._path {
      try visitor.visitSingularStringField(value: v, fieldNumber: 202)
    } }()
    try { if let v = self._qos {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 203)
    } }()
    try { if let v = self._cache {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 204)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_ServiceOptions, rhs: Api_ServiceOptions) -> Bool {
    if lhs._summary != rhs._summary {return false}
    if lhs.authors != rhs.authors {return false}
    if lhs._inheritAuthors != rhs._inheritAuthors {return false}
    if lhs._date != rhs._date {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.auth != rhs.auth {return false}
    if lhs._path != rhs._path {return false}
    if lhs._qos != rhs._qos {return false}
    if lhs._cache != rhs._cache {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_MethodOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MethodOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "summary"),
    3: .same(proto: "ready"),
    100: .same(proto: "authors"),
    101: .standard(proto: "inherit_authors"),
    102: .same(proto: "date"),
    103: .same(proto: "tags"),
    201: .same(proto: "auth"),
    202: .same(proto: "path"),
    203: .same(proto: "qos"),
    204: .same(proto: "cache"),
    20: .same(proto: "readonly"),
    21: .same(proto: "in"),
    22: .same(proto: "out"),
    50: .same(proto: "docs"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt32 = 0
    var _summary: String? = nil
    var _ready: Bool? = nil
    var _authors: [String] = []
    var _inheritAuthors: Bool? = nil
    var _date: String? = nil
    var _tags: [String] = []
    var _auth: [Api_AuthenticationRole] = []
    var _path: String? = nil
    var _qos: Int32? = nil
    var _cache: Api_MessageCache? = nil
    var _readonly: Bool? = nil
    var _in: Api_Payload? = nil
    var _out: Api_Payload? = nil
    var _docs: [Api_ExternalDocumentation] = []

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _summary = source._summary
      _ready = source._ready
      _authors = source._authors
      _inheritAuthors = source._inheritAuthors
      _date = source._date
      _tags = source._tags
      _auth = source._auth
      _path = source._path
      _qos = source._qos
      _cache = source._cache
      _readonly = source._readonly
      _in = source._in
      _out = source._out
      _docs = source._docs
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt32Field(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._summary) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._ready) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._readonly) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._in) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._out) }()
        case 50: try { try decoder.decodeRepeatedMessageField(value: &_storage._docs) }()
        case 100: try { try decoder.decodeRepeatedStringField(value: &_storage._authors) }()
        case 101: try { try decoder.decodeSingularBoolField(value: &_storage._inheritAuthors) }()
        case 102: try { try decoder.decodeSingularStringField(value: &_storage._date) }()
        case 103: try { try decoder.decodeRepeatedStringField(value: &_storage._tags) }()
        case 201: try { try decoder.decodeRepeatedEnumField(value: &_storage._auth) }()
        case 202: try { try decoder.decodeSingularStringField(value: &_storage._path) }()
        case 203: try { try decoder.decodeSingularInt32Field(value: &_storage._qos) }()
        case 204: try { try decoder.decodeSingularMessageField(value: &_storage._cache) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._id != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._id, fieldNumber: 1)
      }
      try { if let v = _storage._summary {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._ready {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._readonly {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._in {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._out {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      } }()
      if !_storage._docs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._docs, fieldNumber: 50)
      }
      if !_storage._authors.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._authors, fieldNumber: 100)
      }
      try { if let v = _storage._inheritAuthors {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 101)
      } }()
      try { if let v = _storage._date {
        try visitor.visitSingularStringField(value: v, fieldNumber: 102)
      } }()
      if !_storage._tags.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._tags, fieldNumber: 103)
      }
      if !_storage._auth.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._auth, fieldNumber: 201)
      }
      try { if let v = _storage._path {
        try visitor.visitSingularStringField(value: v, fieldNumber: 202)
      } }()
      try { if let v = _storage._qos {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 203)
      } }()
      try { if let v = _storage._cache {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 204)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_MethodOptions, rhs: Api_MethodOptions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._summary != rhs_storage._summary {return false}
        if _storage._ready != rhs_storage._ready {return false}
        if _storage._authors != rhs_storage._authors {return false}
        if _storage._inheritAuthors != rhs_storage._inheritAuthors {return false}
        if _storage._date != rhs_storage._date {return false}
        if _storage._tags != rhs_storage._tags {return false}
        if _storage._auth != rhs_storage._auth {return false}
        if _storage._path != rhs_storage._path {return false}
        if _storage._qos != rhs_storage._qos {return false}
        if _storage._cache != rhs_storage._cache {return false}
        if _storage._readonly != rhs_storage._readonly {return false}
        if _storage._in != rhs_storage._in {return false}
        if _storage._out != rhs_storage._out {return false}
        if _storage._docs != rhs_storage._docs {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_PubSubOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PubSubOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "topic"),
    3: .same(proto: "route"),
    4: .same(proto: "retry"),
    5: .standard(proto: "content_type"),
    6: .same(proto: "match"),
    7: .same(proto: "priority"),
    8: .standard(proto: "disable_topic_validation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.topic) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.route) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.retry) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.contentType) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.match) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self.priority) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.disableTopicValidation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.topic.isEmpty {
      try visitor.visitSingularStringField(value: self.topic, fieldNumber: 2)
    }
    if !self.route.isEmpty {
      try visitor.visitSingularStringField(value: self.route, fieldNumber: 3)
    }
    if self.retry != false {
      try visitor.visitSingularBoolField(value: self.retry, fieldNumber: 4)
    }
    if !self.contentType.isEmpty {
      try visitor.visitSingularStringField(value: self.contentType, fieldNumber: 5)
    }
    if !self.match.isEmpty {
      try visitor.visitSingularStringField(value: self.match, fieldNumber: 6)
    }
    if self.priority != 0 {
      try visitor.visitSingularInt32Field(value: self.priority, fieldNumber: 7)
    }
    if self.disableTopicValidation != false {
      try visitor.visitSingularBoolField(value: self.disableTopicValidation, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_PubSubOptions, rhs: Api_PubSubOptions) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.topic != rhs.topic {return false}
    if lhs.route != rhs.route {return false}
    if lhs.retry != rhs.retry {return false}
    if lhs.contentType != rhs.contentType {return false}
    if lhs.match != rhs.match {return false}
    if lhs.priority != rhs.priority {return false}
    if lhs.disableTopicValidation != rhs.disableTopicValidation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_MessageOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MessageOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "summary"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._summary) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._summary {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_MessageOptions, rhs: Api_MessageOptions) -> Bool {
    if lhs._summary != rhs._summary {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_FieldOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FieldOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "summary"),
    2: .same(proto: "in"),
    3: .same(proto: "out"),
    5: .same(proto: "required"),
    6: .same(proto: "example"),
    10: .same(proto: "minimum"),
    11: .same(proto: "exclusiveMinimum"),
    12: .same(proto: "maximum"),
    13: .same(proto: "exclusiveMaximum"),
    14: .same(proto: "multipleOf"),
    20: .same(proto: "maxLength"),
    21: .same(proto: "minLength"),
    30: .same(proto: "pattern"),
    40: .same(proto: "maxItems"),
    41: .same(proto: "minItems"),
    42: .same(proto: "uniqueItems"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._summary) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._in) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._out) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._required) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._example) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self._minimum) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self._exclusiveMinimum) }()
      case 12: try { try decoder.decodeSingularUInt64Field(value: &self._maximum) }()
      case 13: try { try decoder.decodeSingularBoolField(value: &self._exclusiveMaximum) }()
      case 14: try { try decoder.decodeSingularInt64Field(value: &self._multipleOf) }()
      case 20: try { try decoder.decodeSingularUInt32Field(value: &self._maxLength) }()
      case 21: try { try decoder.decodeSingularUInt32Field(value: &self._minLength) }()
      case 30: try { try decoder.decodeSingularStringField(value: &self._pattern) }()
      case 40: try { try decoder.decodeSingularUInt32Field(value: &self._maxItems) }()
      case 41: try { try decoder.decodeSingularUInt32Field(value: &self._minItems) }()
      case 42: try { try decoder.decodeSingularBoolField(value: &self._uniqueItems) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._summary {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._in {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._out {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._required {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._example {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._minimum {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._exclusiveMinimum {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._maximum {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 12)
    } }()
    try { if let v = self._exclusiveMaximum {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
    } }()
    try { if let v = self._multipleOf {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 14)
    } }()
    try { if let v = self._maxLength {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 20)
    } }()
    try { if let v = self._minLength {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 21)
    } }()
    try { if let v = self._pattern {
      try visitor.visitSingularStringField(value: v, fieldNumber: 30)
    } }()
    try { if let v = self._maxItems {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 40)
    } }()
    try { if let v = self._minItems {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 41)
    } }()
    try { if let v = self._uniqueItems {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 42)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_FieldOptions, rhs: Api_FieldOptions) -> Bool {
    if lhs._summary != rhs._summary {return false}
    if lhs._in != rhs._in {return false}
    if lhs._out != rhs._out {return false}
    if lhs._required != rhs._required {return false}
    if lhs._example != rhs._example {return false}
    if lhs._minimum != rhs._minimum {return false}
    if lhs._exclusiveMinimum != rhs._exclusiveMinimum {return false}
    if lhs._maximum != rhs._maximum {return false}
    if lhs._exclusiveMaximum != rhs._exclusiveMaximum {return false}
    if lhs._multipleOf != rhs._multipleOf {return false}
    if lhs._maxLength != rhs._maxLength {return false}
    if lhs._minLength != rhs._minLength {return false}
    if lhs._pattern != rhs._pattern {return false}
    if lhs._maxItems != rhs._maxItems {return false}
    if lhs._minItems != rhs._minItems {return false}
    if lhs._uniqueItems != rhs._uniqueItems {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
