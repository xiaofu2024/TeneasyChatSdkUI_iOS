// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: api/sentry/sentry.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 角色
public enum Api_Sentry_AuthRole: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 未授权
  case roleNone // = 0

  /// 商户临时客户 (h5接入)
  case roleAnonymous // = 1

  /// 商户客户
  case roleCustomer // = 2

  /// 商户客服工作者
  case roleWorker // = 3

  /// 系统服务
  case roleSystem // = 4

  /// 商户入口
  case roleEntrance // = 5

  /// 总管理员
  case roleAdministrator // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .roleNone
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .roleNone
    case 1: self = .roleAnonymous
    case 2: self = .roleCustomer
    case 3: self = .roleWorker
    case 4: self = .roleSystem
    case 5: self = .roleEntrance
    case 6: self = .roleAdministrator
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .roleNone: return 0
    case .roleAnonymous: return 1
    case .roleCustomer: return 2
    case .roleWorker: return 3
    case .roleSystem: return 4
    case .roleEntrance: return 5
    case .roleAdministrator: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Api_Sentry_AuthRole: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Api_Sentry_AuthRole] = [
    .roleNone,
    .roleAnonymous,
    .roleCustomer,
    .roleWorker,
    .roleSystem,
    .roleEntrance,
    .roleAdministrator,
  ]
}

#endif  // swift(>=4.2)

public struct Api_Sentry_AuthToken {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 商户id
  public var tenantID: Int32 = 0

  /// 授权角色
  public var ownerRole: Api_Sentry_AuthRole = .roleNone

  /// 授权id
  public var ownerID: Int32 = 0

  /// 会话id
  public var ownerSession: Int32 = 0

  /// 会话建立时间
  public var ownerSessionTime: Int64 = 0

  /// 授权设备
  public var ownerDevice: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Api_Sentry_AuthRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var path: String = String()

  public var ip: String = String()

  public var token: String = String()

  public var auth: UInt32 = 0

  public var readonly: Bool = false

  public var qos: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Api_Sentry_AuthResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var deviceType: CommonDeviceType = .system

  public var userID: Int32 = 0

  public var sessionID: Int32 = 0

  public var deviceID: Int32 = 0

  public var externalID: Int32 = 0

  public var uniqueID: Int64 = 0

  public var uniqueKey: Data = Data()

  public var isCommand: Bool = false

  public var errCode: Int32 = 0

  public var errMsg: String = String()

  public var jwtToken: String = String()

  public var cloudflareIp: String = String()

  ///真实ip
  public var realIp: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Api_Sentry_AuthRole: @unchecked Sendable {}
extension Api_Sentry_AuthToken: @unchecked Sendable {}
extension Api_Sentry_AuthRequest: @unchecked Sendable {}
extension Api_Sentry_AuthResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "api.sentry"

extension Api_Sentry_AuthRole: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ROLE_NONE"),
    1: .same(proto: "ROLE_ANONYMOUS"),
    2: .same(proto: "ROLE_CUSTOMER"),
    3: .same(proto: "ROLE_WORKER"),
    4: .same(proto: "ROLE_SYSTEM"),
    5: .same(proto: "ROLE_ENTRANCE"),
    6: .same(proto: "ROLE_ADMINISTRATOR"),
  ]
}

extension Api_Sentry_AuthToken: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AuthToken"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "tenant_id"),
    2: .standard(proto: "owner_role"),
    3: .standard(proto: "owner_id"),
    4: .standard(proto: "owner_session"),
    5: .standard(proto: "owner_session_time"),
    6: .standard(proto: "owner_device"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.tenantID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.ownerRole) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.ownerID) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.ownerSession) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.ownerSessionTime) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.ownerDevice) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tenantID != 0 {
      try visitor.visitSingularInt32Field(value: self.tenantID, fieldNumber: 1)
    }
    if self.ownerRole != .roleNone {
      try visitor.visitSingularEnumField(value: self.ownerRole, fieldNumber: 2)
    }
    if self.ownerID != 0 {
      try visitor.visitSingularInt32Field(value: self.ownerID, fieldNumber: 3)
    }
    if self.ownerSession != 0 {
      try visitor.visitSingularInt32Field(value: self.ownerSession, fieldNumber: 4)
    }
    if self.ownerSessionTime != 0 {
      try visitor.visitSingularInt64Field(value: self.ownerSessionTime, fieldNumber: 5)
    }
    if self.ownerDevice != 0 {
      try visitor.visitSingularInt64Field(value: self.ownerDevice, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Sentry_AuthToken, rhs: Api_Sentry_AuthToken) -> Bool {
    if lhs.tenantID != rhs.tenantID {return false}
    if lhs.ownerRole != rhs.ownerRole {return false}
    if lhs.ownerID != rhs.ownerID {return false}
    if lhs.ownerSession != rhs.ownerSession {return false}
    if lhs.ownerSessionTime != rhs.ownerSessionTime {return false}
    if lhs.ownerDevice != rhs.ownerDevice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Sentry_AuthRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AuthRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "ip"),
    3: .same(proto: "token"),
    4: .same(proto: "auth"),
    5: .same(proto: "readonly"),
    6: .same(proto: "qos"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.path) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.ip) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.token) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.auth) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.readonly) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.qos) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 1)
    }
    if !self.ip.isEmpty {
      try visitor.visitSingularStringField(value: self.ip, fieldNumber: 2)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 3)
    }
    if self.auth != 0 {
      try visitor.visitSingularUInt32Field(value: self.auth, fieldNumber: 4)
    }
    if self.readonly != false {
      try visitor.visitSingularBoolField(value: self.readonly, fieldNumber: 5)
    }
    if self.qos != 0 {
      try visitor.visitSingularUInt32Field(value: self.qos, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Sentry_AuthRequest, rhs: Api_Sentry_AuthRequest) -> Bool {
    if lhs.path != rhs.path {return false}
    if lhs.ip != rhs.ip {return false}
    if lhs.token != rhs.token {return false}
    if lhs.auth != rhs.auth {return false}
    if lhs.readonly != rhs.readonly {return false}
    if lhs.qos != rhs.qos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Sentry_AuthResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AuthResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_type"),
    2: .standard(proto: "user_id"),
    3: .standard(proto: "session_id"),
    4: .standard(proto: "device_id"),
    5: .standard(proto: "external_id"),
    6: .standard(proto: "unique_id"),
    7: .standard(proto: "unique_key"),
    8: .standard(proto: "is_command"),
    9: .standard(proto: "err_code"),
    10: .standard(proto: "err_msg"),
    11: .standard(proto: "jwt_token"),
    12: .standard(proto: "cloudflare_ip"),
    13: .standard(proto: "real_ip"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.deviceType) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.sessionID) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.deviceID) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.externalID) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.uniqueID) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.uniqueKey) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.isCommand) }()
      case 9: try { try decoder.decodeSingularInt32Field(value: &self.errCode) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.errMsg) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.jwtToken) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.cloudflareIp) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.realIp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.deviceType != .system {
      try visitor.visitSingularEnumField(value: self.deviceType, fieldNumber: 1)
    }
    if self.userID != 0 {
      try visitor.visitSingularInt32Field(value: self.userID, fieldNumber: 2)
    }
    if self.sessionID != 0 {
      try visitor.visitSingularInt32Field(value: self.sessionID, fieldNumber: 3)
    }
    if self.deviceID != 0 {
      try visitor.visitSingularInt32Field(value: self.deviceID, fieldNumber: 4)
    }
    if self.externalID != 0 {
      try visitor.visitSingularInt32Field(value: self.externalID, fieldNumber: 5)
    }
    if self.uniqueID != 0 {
      try visitor.visitSingularInt64Field(value: self.uniqueID, fieldNumber: 6)
    }
    if !self.uniqueKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.uniqueKey, fieldNumber: 7)
    }
    if self.isCommand != false {
      try visitor.visitSingularBoolField(value: self.isCommand, fieldNumber: 8)
    }
    if self.errCode != 0 {
      try visitor.visitSingularInt32Field(value: self.errCode, fieldNumber: 9)
    }
    if !self.errMsg.isEmpty {
      try visitor.visitSingularStringField(value: self.errMsg, fieldNumber: 10)
    }
    if !self.jwtToken.isEmpty {
      try visitor.visitSingularStringField(value: self.jwtToken, fieldNumber: 11)
    }
    if !self.cloudflareIp.isEmpty {
      try visitor.visitSingularStringField(value: self.cloudflareIp, fieldNumber: 12)
    }
    if !self.realIp.isEmpty {
      try visitor.visitSingularStringField(value: self.realIp, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Sentry_AuthResponse, rhs: Api_Sentry_AuthResponse) -> Bool {
    if lhs.deviceType != rhs.deviceType {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.sessionID != rhs.sessionID {return false}
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.externalID != rhs.externalID {return false}
    if lhs.uniqueID != rhs.uniqueID {return false}
    if lhs.uniqueKey != rhs.uniqueKey {return false}
    if lhs.isCommand != rhs.isCommand {return false}
    if lhs.errCode != rhs.errCode {return false}
    if lhs.errMsg != rhs.errMsg {return false}
    if lhs.jwtToken != rhs.jwtToken {return false}
    if lhs.cloudflareIp != rhs.cloudflareIp {return false}
    if lhs.realIp != rhs.realIp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
