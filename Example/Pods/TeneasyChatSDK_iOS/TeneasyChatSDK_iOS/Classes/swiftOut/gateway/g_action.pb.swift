// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: gateway/g_action.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// SC: service -> client
/// CS: client -> service
public enum Gateway_Action: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// 协议转发
  case forward // = 0

  /// 成功连接后,下发必要数据
  case schi // = 1

  /// 已方发消息
  case cssendMsg // = 2

  /// 已方发消息确认
  case scsendMsgAck // = 3

  /// 对方收消息
  case screcvMsg // = 4

  /// 对方收消息确认
  case csrecvMsgAck // = 5

  /// 已方标记消息已读
  /// 为什么需要标记已读:
  /// (刚需)客服端换设备后, 无法知道自己哪些会话消息未读, 无法做 小红点标记
  case csreadMsg // = 6

  /// 对方收到消息已读(看需求, 没有需求则对于用户不做表现)
  case screadMsg // = 7

  /// 已方撤回(删除)消息
  case csdeleteMsg // = 8

  /// 已方撤回(删除)消息确认
  case scdeleteMsgAck // = 9

  /// 对方撤回(删除)消息
  case scdeleteMsg // = 10

  /// 已方编辑消息
  case cseditMsg // = 11

  /// 已方编辑消息确认
  case sceditMsgAck // = 12

  /// 对方编辑消息
  case sceditMsg // = 13

  /// 结束: 对方正在输入(发送图片,音视频,文件)...
  case inputtingBegin // = 14

  /// 结束: 对方正在输入
  case inputtingEnd // = 15

  /// TODO: 客服端协议补充
  /// [客服]聊天会话(所有权)发生改变
  case scchatChanged // = 16

  /// [用户]接待客服发生改变
  case scworkerChanged // = 17

  /// 用户链接状态发生改变
  case scuserConnectionChanged // = 18

  /// [客服]以其身份模拟发送给用户的消息
  /// 如: 自动回复的 答案
  case scsimSend // = 19
  case UNRECOGNIZED(Int)

  public init() {
    self = .forward
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .forward
    case 1: self = .schi
    case 2: self = .cssendMsg
    case 3: self = .scsendMsgAck
    case 4: self = .screcvMsg
    case 5: self = .csrecvMsgAck
    case 6: self = .csreadMsg
    case 7: self = .screadMsg
    case 8: self = .csdeleteMsg
    case 9: self = .scdeleteMsgAck
    case 10: self = .scdeleteMsg
    case 11: self = .cseditMsg
    case 12: self = .sceditMsgAck
    case 13: self = .sceditMsg
    case 14: self = .inputtingBegin
    case 15: self = .inputtingEnd
    case 16: self = .scchatChanged
    case 17: self = .scworkerChanged
    case 18: self = .scuserConnectionChanged
    case 19: self = .scsimSend
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .forward: return 0
    case .schi: return 1
    case .cssendMsg: return 2
    case .scsendMsgAck: return 3
    case .screcvMsg: return 4
    case .csrecvMsgAck: return 5
    case .csreadMsg: return 6
    case .screadMsg: return 7
    case .csdeleteMsg: return 8
    case .scdeleteMsgAck: return 9
    case .scdeleteMsg: return 10
    case .cseditMsg: return 11
    case .sceditMsgAck: return 12
    case .sceditMsg: return 13
    case .inputtingBegin: return 14
    case .inputtingEnd: return 15
    case .scchatChanged: return 16
    case .scworkerChanged: return 17
    case .scuserConnectionChanged: return 18
    case .scsimSend: return 19
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Gateway_Action: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Gateway_Action] = [
    .forward,
    .schi,
    .cssendMsg,
    .scsendMsgAck,
    .screcvMsg,
    .csrecvMsgAck,
    .csreadMsg,
    .screadMsg,
    .csdeleteMsg,
    .scdeleteMsgAck,
    .scdeleteMsg,
    .cseditMsg,
    .sceditMsgAck,
    .sceditMsg,
    .inputtingBegin,
    .inputtingEnd,
    .scchatChanged,
    .scworkerChanged,
    .scuserConnectionChanged,
    .scsimSend,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Gateway_Action: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Gateway_Action: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ActionForward"),
    1: .same(proto: "ActionSCHi"),
    2: .same(proto: "ActionCSSendMsg"),
    3: .same(proto: "ActionSCSendMsgACK"),
    4: .same(proto: "ActionSCRecvMsg"),
    5: .same(proto: "ActionCSRecvMsgACK"),
    6: .same(proto: "ActionCSReadMsg"),
    7: .same(proto: "ActionSCReadMsg"),
    8: .same(proto: "ActionCSDeleteMsg"),
    9: .same(proto: "ActionSCDeleteMsgACK"),
    10: .same(proto: "ActionSCDeleteMsg"),
    11: .same(proto: "ActionCSEditMsg"),
    12: .same(proto: "ActionSCEditMsgACK"),
    13: .same(proto: "ActionSCEditMsg"),
    14: .same(proto: "ActionInputtingBegin"),
    15: .same(proto: "ActionInputtingEnd"),
    16: .same(proto: "ActionSCChatChanged"),
    17: .same(proto: "ActionSCWorkerChanged"),
    18: .same(proto: "ActionSCUserConnectionChanged"),
    19: .same(proto: "ActionSCSimSend"),
  ]
}
